/*==========================================================================*\
 |  _Step.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to Step.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006-2012 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package org.webcat.grader;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import er.extensions.eof.ERXEOControlUtilities;
import er.extensions.eof.ERXKey;
import org.apache.log4j.Logger;
import org.webcat.core.EOBasedKeyGenerator;
import org.webcat.woextensions.WCFetchSpecification;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * Step.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _Step
    extends org.webcat.core.EOBase
    implements org.webcat.core.MutableContainer.MutableContainerOwner
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _Step object.
     */
    public _Step()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * Step object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @param updateMutableFieldsValue
     * @return The newly created object
     */
    public static Step create(
        EOEditingContext editingContext,
        boolean updateMutableFieldsValue
        )
    {
        Step eoObject = (Step)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _Step.ENTITY_NAME);
        eoObject.setUpdateMutableFields(updateMutableFieldsValue);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static Step localInstance(
        EOEditingContext editingContext, Step eo)
    {
        return (eo == null)
            ? null
            : (Step)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static Step forId(
        EOEditingContext ec, int id)
    {
        Step obj = null;
        if (id > 0)
        {
            NSArray<Step> objects =
                objectsMatchingValues(ec, "id", new Integer(id));
            if (objects != null && objects.count() > 0)
            {
                obj = objects.objectAtIndex(0);
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static Step forId(
        EOEditingContext ec, EOGlobalID id)
    {
        return (Step)ec.faultForGlobalID(id, ec);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static Step forId(
        EOEditingContext ec, String id)
    {
        return forId(ec, er.extensions.foundation.ERXValueUtilities.intValue(id));
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String CONFIG_SETTINGS_KEY = "configSettings";
    public static final ERXKey<NSData> configSettings =
        new ERXKey<NSData>(CONFIG_SETTINGS_KEY);
    public static final String ORDER_KEY = "order";
    public static final ERXKey<Integer> order =
        new ERXKey<Integer>(ORDER_KEY);
    public static final String TIMEOUT_KEY = "timeout";
    public static final ERXKey<Integer> timeout =
        new ERXKey<Integer>(TIMEOUT_KEY);
    public static final String UPDATE_MUTABLE_FIELDS_KEY = "updateMutableFields";
    public static final ERXKey<Integer> updateMutableFields =
        new ERXKey<Integer>(UPDATE_MUTABLE_FIELDS_KEY);
    // To-one relationships ---
    public static final String ASSIGNMENT_KEY = "assignment";
    public static final ERXKey<org.webcat.grader.Assignment> assignment =
        new ERXKey<org.webcat.grader.Assignment>(ASSIGNMENT_KEY);
    public static final String CONFIG_KEY = "config";
    public static final ERXKey<org.webcat.grader.StepConfig> config =
        new ERXKey<org.webcat.grader.StepConfig>(CONFIG_KEY);
    public static final String GRADING_PLUGIN_KEY = "gradingPlugin";
    public static final ERXKey<org.webcat.grader.GradingPlugin> gradingPlugin =
        new ERXKey<org.webcat.grader.GradingPlugin>(GRADING_PLUGIN_KEY);
    // To-many relationships ---
    public static final String GRADER_PREFS_KEY = "graderPrefs";
    public static final ERXKey<org.webcat.grader.GraderPrefs> graderPrefs =
        new ERXKey<org.webcat.grader.GraderPrefs>(GRADER_PREFS_KEY);
    // Fetch specifications ---
    public static final String ENTITY_NAME = "Step";

    public transient final EOBasedKeyGenerator generateKey =
        new EOBasedKeyGenerator(this);


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public Step localInstance(EOEditingContext editingContext)
    {
        return (Step)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Refetch this object from the database.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public Step refetch(EOEditingContext editingContext)
    {
        return (Step)refetchObjectFromDBinEditingContext(
            editingContext);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    @SuppressWarnings("unchecked")
    public NSDictionary<String, Object> changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this));
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this).objectForKey("id");
        }
        catch (Exception e)
        {
            return er.extensions.eof.ERXConstant.ZeroInteger;
        }
    }


    //-- Local mutable cache --
    private org.webcat.core.MutableDictionary configSettingsCache;
    private NSData configSettingsRawCache;

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>configSettings</code> value.
     * @return the value of the attribute
     */
    public org.webcat.core.MutableDictionary configSettings()
    {
        NSData dbValue =
            (NSData)storedValueForKey("configSettings");
        if (configSettingsRawCache != dbValue)
        {
            if (dbValue != null && dbValue.equals( configSettingsRawCache))
            {
                // They are still equal, so just update the raw cache
                configSettingsRawCache = dbValue;
            }
            else
            {
                // Underlying attribute may have changed because
                // of a concurrent update through another editing
                // context, so throw away current values.
                configSettingsRawCache = dbValue;
                org.webcat.core.MutableDictionary newValue =
                    org.webcat.core.MutableDictionary
                    .objectWithArchiveData(dbValue);
                if (configSettingsCache != null)
                {
                    configSettingsCache.copyFrom(newValue);
                }
                else
                {
                    configSettingsCache = newValue;
                }
                configSettingsCache.setOwner(this);
                setUpdateMutableFields(true);
            }
        }
        else if (dbValue == null && configSettingsCache == null)
        {
            configSettingsCache =
                org.webcat.core.MutableDictionary
                .objectWithArchiveData(dbValue);
             configSettingsCache.setOwner(this);
             setUpdateMutableFields(true);
        }
        return configSettingsCache;
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>configSettings</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setConfigSettings(org.webcat.core.MutableDictionary value)
    {
        if (log.isDebugEnabled())
        {
            log.debug("setConfigSettings("
                + value + ")");
        }
        if (configSettingsCache == null)
        {
            configSettingsCache = value;
            value.setHasChanged( false );
            configSettingsRawCache = value.archiveData();
            takeStoredValueForKey(configSettingsRawCache, "configSettings");
        }
        else if (configSettingsCache != value)  // ( configSettingsCache != null )
        {
            configSettingsCache.copyFrom(value);
            setUpdateMutableFields(true);
        }
        else  // (configSettingsCache == non-null value)
        {
            // no nothing
        }
    }


    // ----------------------------------------------------------
    /**
     * Clear the value of this object's <code>configSettings</code>
     * property.
     */
    public void clearConfigSettings()
    {
        if (log.isDebugEnabled())
        {
            log.debug("clearConfigSettings()");
        }
        takeStoredValueForKey(null, "configSettings");
        configSettingsRawCache = null;
        configSettingsCache = null;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>order</code> value.
     * @return the value of the attribute
     */
    public int order()
    {
        Integer returnValue =
            (Integer)storedValueForKey( "order" );
        return ( returnValue == null )
            ? 0
            : returnValue.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>order</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setOrder( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setOrder("
                + value + "): was " + order() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value );
            setOrderRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>order</code> value.
     * @return the value of the attribute
     */
    public Integer orderRaw()
    {
        return (Integer)storedValueForKey( "order" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>order</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setOrderRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setOrderRaw("
                + value + "): was " + orderRaw() );
        }
        takeStoredValueForKey( value, "order" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>timeout</code> value.
     * @return the value of the attribute
     */
    public int timeout()
    {
        Integer returnValue =
            (Integer)storedValueForKey( "timeout" );
        return ( returnValue == null )
            ? 0
            : returnValue.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>timeout</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setTimeout( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setTimeout("
                + value + "): was " + timeout() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value );
            setTimeoutRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>timeout</code> value.
     * @return the value of the attribute
     */
    public Integer timeoutRaw()
    {
        return (Integer)storedValueForKey( "timeout" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>timeout</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setTimeoutRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setTimeoutRaw("
                + value + "): was " + timeoutRaw() );
        }
        takeStoredValueForKey( value, "timeout" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public boolean updateMutableFields()
    {
        Integer returnValue =
            (Integer)storedValueForKey( "updateMutableFields" );
        return ( returnValue == null )
            ? false
            : ( returnValue.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUpdateMutableFields( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUpdateMutableFields("
                + value + "): was " + updateMutableFields() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value ? 1 : 0 );
            setUpdateMutableFieldsRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public Integer updateMutableFieldsRaw()
    {
        return (Integer)storedValueForKey( "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUpdateMutableFieldsRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUpdateMutableFieldsRaw("
                + value + "): was " + updateMutableFieldsRaw() );
        }
        takeStoredValueForKey( value, "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void saveMutables()
    {
        log.debug("saveMutables()");
        if ( configSettingsCache != null
            && configSettingsCache.hasChanged() )
        {
            configSettingsRawCache = configSettingsCache.archiveData();
            takeStoredValueForKey( configSettingsRawCache, "configSettings" );
            configSettingsCache.setHasChanged( false );
        }

        setUpdateMutableFields( false );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void willUpdate()
    {
        log.debug("willUpdate()");
        saveMutables();
        super.willUpdate();
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is inserted into the database.
     */
    public void willInsert()
    {
        log.debug("willInsert()");
        saveMutables();
        super.willInsert();
    }


    // ----------------------------------------------------------
    /**
     * Called when the object is invalidated.
     */
    public void flushCaches()
    {
        log.debug("flushCaches()");
        configSettingsCache = null;
        configSettingsRawCache  = null;
        super.flushCaches();
    }


    // ----------------------------------------------------------
    /**
     * Called when an owned mutable container object is changed.
     */
    public void mutableContainerHasChanged()
    {
        setUpdateMutableFields( true );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>assignment</code>
     * relationship.
     * @return the entity in the relationship
     */
    public org.webcat.grader.Assignment assignment()
    {
        return (org.webcat.grader.Assignment)storedValueForKey( "assignment" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>assignment</code>
     * relationship (DO NOT USE--instead, use
     * <code>setAssignmentRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setAssignment( org.webcat.grader.Assignment value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setAssignment("
                + value + "): was " + assignment() );
        }
        takeStoredValueForKey( value, "assignment" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>assignment</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setAssignmentRelationship(
        org.webcat.grader.Assignment value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setAssignmentRelationship("
                + value + "): was " + assignment() );
        }
        if ( value == null )
        {
            org.webcat.grader.Assignment object = assignment();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "assignment" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "assignment" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>config</code>
     * relationship.
     * @return the entity in the relationship
     */
    public org.webcat.grader.StepConfig config()
    {
        return (org.webcat.grader.StepConfig)storedValueForKey( "config" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>config</code>
     * relationship (DO NOT USE--instead, use
     * <code>setConfigRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setConfig( org.webcat.grader.StepConfig value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setConfig("
                + value + "): was " + config() );
        }
        takeStoredValueForKey( value, "config" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>config</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setConfigRelationship(
        org.webcat.grader.StepConfig value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setConfigRelationship("
                + value + "): was " + config() );
        }
        if ( value == null )
        {
            org.webcat.grader.StepConfig object = config();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "config" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "config" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>gradingPlugin</code>
     * relationship.
     * @return the entity in the relationship
     */
    public org.webcat.grader.GradingPlugin gradingPlugin()
    {
        return (org.webcat.grader.GradingPlugin)storedValueForKey( "gradingPlugin" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>gradingPlugin</code>
     * relationship (DO NOT USE--instead, use
     * <code>setGradingPluginRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setGradingPlugin( org.webcat.grader.GradingPlugin value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setGradingPlugin("
                + value + "): was " + gradingPlugin() );
        }
        takeStoredValueForKey( value, "gradingPlugin" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>gradingPlugin</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setGradingPluginRelationship(
        org.webcat.grader.GradingPlugin value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setGradingPluginRelationship("
                + value + "): was " + gradingPlugin() );
        }
        if ( value == null )
        {
            org.webcat.grader.GradingPlugin object = gradingPlugin();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "gradingPlugin" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "gradingPlugin" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>graderPrefs</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<org.webcat.grader.GraderPrefs> graderPrefs()
    {
        return (NSArray<org.webcat.grader.GraderPrefs>)
            storedValueForKey("graderPrefs");
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>graderPrefs</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setGraderPrefs(
        NSMutableArray<org.webcat.grader.GraderPrefs>  value)
    {
        if (log.isDebugEnabled())
        {
            log.debug("setGraderPrefs("
                + value + "): was " + graderPrefs());
        }
        takeStoredValueForKey(value, "graderPrefs");
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>graderPrefs</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToGraderPrefsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToGraderPrefs( org.webcat.grader.GraderPrefs value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToGraderPrefs("
                + value + "): was " + graderPrefs() );
        }
        NSMutableArray<org.webcat.grader.GraderPrefs> array =
            (NSMutableArray<org.webcat.grader.GraderPrefs>)graderPrefs();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>graderPrefs</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromGraderPrefsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromGraderPrefs( org.webcat.grader.GraderPrefs value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromGraderPrefs("
                + value + "): was " + graderPrefs() );
        }
        NSMutableArray<org.webcat.grader.GraderPrefs> array =
            (NSMutableArray<org.webcat.grader.GraderPrefs>)graderPrefs();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>graderPrefs</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToGraderPrefsRelationship( org.webcat.grader.GraderPrefs value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToGraderPrefsRelationship("
                + value + "): was " + graderPrefs() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "graderPrefs" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>graderPrefs</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromGraderPrefsRelationship( org.webcat.grader.GraderPrefs value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromGraderPrefsRelationship("
                + value + "): was " + graderPrefs() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "graderPrefs" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>graderPrefs</code> relationship.
     *
     * @return The new entity
     */
    public org.webcat.grader.GraderPrefs createGraderPrefsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createGraderPrefsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "GraderPrefs" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "graderPrefs" );
        return (org.webcat.grader.GraderPrefs)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>graderPrefs</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteGraderPrefsRelationship( org.webcat.grader.GraderPrefs value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteGraderPrefsRelationship("
                + value + "): was " + graderPrefs() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "graderPrefs" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>graderPrefs</code> relationship.
     */
    public void deleteAllGraderPrefsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllGraderPrefsRelationships(): was "
                + graderPrefs() );
        }
        for (org.webcat.grader.GraderPrefs object : graderPrefs())
        {
            deleteGraderPrefsRelationship(object);
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a fetch specification.
     *
     * @param context The editing context to use
     * @param fspec The fetch specification to use
     *
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<Step> objectsWithFetchSpecification(
        EOEditingContext context,
        EOFetchSpecification fspec)
    {
        return context.objectsWithFetchSpecification(fspec);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve all objects of this type.
     *
     * @param context The editing context to use
     *
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<Step> allObjects(
        EOEditingContext context)
    {
        return objectsMatchingQualifier(context, null, null);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a qualifier.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     *
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<Step> objectsMatchingQualifier(
        EOEditingContext context,
        EOQualifier qualifier)
    {
        return objectsMatchingQualifier(context, qualifier, null);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a qualifier and sort orderings.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     * @param sortOrderings The sort orderings to use
     *
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<Step> objectsMatchingQualifier(
        EOEditingContext context,
        EOQualifier qualifier,
        NSArray<EOSortOrdering> sortOrderings)
    {
        WCFetchSpecification<Step> fspec =
            new WCFetchSpecification<Step>(
                ENTITY_NAME, qualifier, sortOrderings);
        fspec.setUsesDistinct(true);
        return objectsWithFetchSpecification(context, fspec);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the first object that matches a qualifier, when
     * sorted with the specified sort orderings.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     * @param sortOrderings the sort orderings
     *
     * @return the first entity that was retrieved, or null if there was none
     */
    public static Step firstObjectMatchingQualifier(
        EOEditingContext context,
        EOQualifier qualifier,
        NSArray<EOSortOrdering> sortOrderings)
    {
        WCFetchSpecification<Step> fspec =
            new WCFetchSpecification<Step>(
                ENTITY_NAME, qualifier, sortOrderings);
        fspec.setUsesDistinct(true);
        fspec.setFetchLimit(1);
        NSArray<Step> objects =
            objectsWithFetchSpecification(context, fspec);
        return (objects.size() > 0)
            ? objects.get(0)
            : null;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve a single object using a list of keys and values to match.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     *
     * @return the single entity that was retrieved
     *
     * @throws EOUtilities.MoreThanOneException
     *     if there is more than one matching object
     */
    public static Step uniqueObjectMatchingQualifier(
        EOEditingContext context,
        EOQualifier qualifier) throws EOUtilities.MoreThanOneException
    {
        NSArray<Step> objects =
            objectsMatchingQualifier(context, qualifier);
        if (objects.size() > 1)
        {
            String msg = "fetching Step";
            try
            {
                if (qualifier != null)
                {
                    msg += " where " + qualifier;
                }
                msg += ", result = " + objects;
            }
            catch (Exception e)
            {
                log.error("Exception building MoreThanOneException message, "
                    + "contents so far: " + msg, e);
            }
            throw new EOUtilities.MoreThanOneException(msg);
        }
        return (objects.size() > 0)
            ? objects.get(0)
            : null;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a list of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a list of keys and values to match, alternating
     *     "key", "value", "key", "value"...
     *
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<Step> objectsMatchingValues(
        EOEditingContext context,
        Object... keysAndValues)
    {
        if (keysAndValues.length % 2 != 0)
        {
            throw new IllegalArgumentException("There should a value "
                + "corresponding to every key that was passed. Args = "
                + java.util.Arrays.toString(keysAndValues));
        }

        NSMutableDictionary<String, Object> valueDictionary =
            new NSMutableDictionary<String, Object>();

        for (int i = 0; i < keysAndValues.length; i += 2)
        {
            Object key = keysAndValues[i];
            Object value = keysAndValues[i + 1];

            if (key == null)
            {
                throw new IllegalArgumentException(
                    "Found null where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }
            else if (!(key instanceof String))
            {
                throw new IllegalArgumentException(
                    "Found a " + key.getClass().getName() + " [" + key + "]"
                    + " where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }

            valueDictionary.setObjectForKey(value, (String)key);
        }

        return objectsMatchingValues(context, valueDictionary);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a dictionary of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a dictionary of keys and values to match
     *
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<Step> objectsMatchingValues(
        EOEditingContext context,
        NSDictionary<String, Object> keysAndValues)
    {
        return EOUtilities.objectsMatchingValues(context, ENTITY_NAME,
            keysAndValues);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the first object that matches a set of keys and values, when
     * sorted with the specified sort orderings.
     *
     * @param context The editing context to use
     * @param sortOrderings the sort orderings
     * @param keysAndValues a list of keys and values to match, alternating
     *     "key", "value", "key", "value"...
     *
     * @return the first entity that was retrieved, or null if there was none
     */
    public static Step firstObjectMatchingValues(
        EOEditingContext context,
        NSArray<EOSortOrdering> sortOrderings,
        Object... keysAndValues)
    {
        if (keysAndValues.length % 2 != 0)
        {
            throw new IllegalArgumentException("There should a value "
                + "corresponding to every key that was passed. Args = "
                + java.util.Arrays.toString(keysAndValues));
        }

        NSMutableDictionary<String, Object> valueDictionary =
            new NSMutableDictionary<String, Object>();

        for (int i = 0; i < keysAndValues.length; i += 2)
        {
            Object key = keysAndValues[i];
            Object value = keysAndValues[i + 1];

            if (key == null)
            {
                throw new IllegalArgumentException(
                    "Found null where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }
            else if (!(key instanceof String))
            {
                throw new IllegalArgumentException(
                    "Found a " + key.getClass().getName() + " [" + key + "]"
                    + " where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }

            valueDictionary.setObjectForKey(value, (String)key);
        }

        return firstObjectMatchingValues(
            context, sortOrderings, valueDictionary);
    }


    // ----------------------------------------------------------
    /**
     * Retrieves the first object that matches a set of keys and values, when
     * sorted with the specified sort orderings.
     *
     * @param context The editing context to use
     * @param sortOrderings the sort orderings
     * @param keysAndValues a dictionary of keys and values to match
     *
     * @return the first entity that was retrieved, or null if there was none
     */
    public static Step firstObjectMatchingValues(
        EOEditingContext context,
        NSArray<EOSortOrdering> sortOrderings,
        NSDictionary<String, Object> keysAndValues)
    {
        WCFetchSpecification<Step> fspec =
            new WCFetchSpecification<Step>(
                ENTITY_NAME,
                EOQualifier.qualifierToMatchAllValues(keysAndValues),
                sortOrderings);
        fspec.setUsesDistinct(true);
        fspec.setFetchLimit(1);

        NSArray<Step> objects =
            objectsWithFetchSpecification( context, fspec );

        if ( objects.count() == 0 )
        {
            return null;
        }
        else
        {
            return objects.objectAtIndex(0);
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve a single object using a list of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a list of keys and values to match, alternating
     *     "key", "value", "key", "value"...
     *
     * @return the single entity that was retrieved, or null if there was none
     *
     * @throws EOUtilities.MoreThanOneException
     *     if there is more than one matching object
     */
    public static Step uniqueObjectMatchingValues(
        EOEditingContext context,
        Object... keysAndValues) throws EOUtilities.MoreThanOneException
    {
        if (keysAndValues.length % 2 != 0)
        {
            throw new IllegalArgumentException("There should a value "
                + "corresponding to every key that was passed. Args = "
                + java.util.Arrays.toString(keysAndValues));
        }

        NSMutableDictionary<String, Object> valueDictionary =
            new NSMutableDictionary<String, Object>();

        for (int i = 0; i < keysAndValues.length; i += 2)
        {
            Object key = keysAndValues[i];
            Object value = keysAndValues[i + 1];

            if (key == null)
            {
                throw new IllegalArgumentException(
                    "Found null where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }
            else if (!(key instanceof String))
            {
                throw new IllegalArgumentException(
                    "Found a " + key.getClass().getName() + " [" + key + "]"
                    + " where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }

            valueDictionary.setObjectForKey(value, (String)key);
        }

        return uniqueObjectMatchingValues(context, valueDictionary);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve an object using a dictionary of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a dictionary of keys and values to match
     *
     * @return the single entity that was retrieved, or null if there was none
     *
     * @throws EOUtilities.MoreThanOneException
     *     if there is more than one matching object
     */
    public static Step uniqueObjectMatchingValues(
        EOEditingContext context,
        NSDictionary<String, Object> keysAndValues)
        throws EOUtilities.MoreThanOneException
    {
        try
        {
            return (Step)EOUtilities.objectMatchingValues(
                context, ENTITY_NAME, keysAndValues);
        }
        catch (EOObjectNotAvailableException e)
        {
            return null;
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the count of all objects of this type.
     *
     * @param context The editing context to use
     *
     * @return the count of all objects
     */
    public static int countOfAllObjects(EOEditingContext context)
    {
        return countOfObjectsMatchingQualifier(context, null);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the count of objects that match a qualifier.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     *
     * @return the count of objects matching the qualifier
     */
    public static int countOfObjectsMatchingQualifier(
        EOEditingContext context, EOQualifier qualifier)
    {
        return ERXEOControlUtilities.objectCountWithQualifier(
                context, ENTITY_NAME, qualifier);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the count of objects using a list of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a list of keys and values to match, alternating
     *     "key", "value", "key", "value"...
     *
     * @return the count of objects that match the specified values
     */
    public static int countOfObjectsMatchingValues(
        EOEditingContext context,
        Object... keysAndValues)
    {
        if (keysAndValues.length % 2 != 0)
        {
            throw new IllegalArgumentException("There should a value "
                + "corresponding to every key that was passed. Args = "
                + java.util.Arrays.toString(keysAndValues));
        }

        NSMutableDictionary<String, Object> valueDictionary =
            new NSMutableDictionary<String, Object>();

        for (int i = 0; i < keysAndValues.length; i += 2)
        {
            Object key = keysAndValues[i];
            Object value = keysAndValues[i + 1];

            if (key == null)
            {
                throw new IllegalArgumentException(
                    "Found null where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }
            else if (!(key instanceof String))
            {
                throw new IllegalArgumentException(
                    "Found a " + key.getClass().getName() + " [" + key + "]"
                    + " where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }

            valueDictionary.setObjectForKey(value, (String)key);
        }

        return countOfObjectsMatchingValues(context, valueDictionary);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the count of objects using a dictionary of keys and values to
     * match.
     *
     * @param context The editing context to use
     * @param keysAndValues a dictionary of keys and values to match
     *
     * @return the count of objects that matched the specified values
     */
    public static int countOfObjectsMatchingValues(
        EOEditingContext context,
        NSDictionary<String, Object> keysAndValues)
    {
        return countOfObjectsMatchingQualifier(context,
                EOQualifier.qualifierToMatchAllValues(keysAndValues));
    }


    // ----------------------------------------------------------
    /**
     * Produce a string representation of this object.  This implementation
     * calls UserPresentableDescription(), which uses WebObjects' internal
     * mechanism to print out the visible fields of this object.  Normally,
     * subclasses would override userPresentableDescription() to change
     * the way the object is printed.
     *
     * @return A string representation of the object's value
     */
    public String toString()
    {
        return userPresentableDescription();
    }


    // ----------------------------------------------------------
    /**
     * Hack to workaround bugs in ERXEOAccessUtilities.reapplyChanges().
     *
     * @param value the new value of the key
     * @param key the key to access
     */
    public void takeValueForKey(Object value, String key)
    {
        // if (ERXValueUtilities.isNull(value))
        if (value == NSKeyValueCoding.NullValue
            || value instanceof NSKeyValueCoding.Null)
        {
            value = null;
        }

        if (value instanceof NSData)
        {
            super.takeStoredValueForKey(value, key);
        }
        else
        {
            super.takeValueForKey(value, key);
        }
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger(Step.class);
}
